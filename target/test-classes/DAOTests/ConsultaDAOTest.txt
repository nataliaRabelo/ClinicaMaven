package DAOTests;

import model.Consulta;
import model.ConsultaDAO;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

public class ConsultaDAOTest {

    private ConsultaDAO consultaDAO;
    private Connection conn;

    @Before
    public void setUp() throws SQLException {
        // Assume que os detalhes da conexão são corretos para o seu banco de dados
        String url = "jdbc:mysql://localhost:3306/meu_banco";
        String user = "usuario";
        String password = "senha";
        conn = DriverManager.getConnection(url, user, password);
        consultaDAO = new ConsultaDAO(conn);
    }

    @After
    public void tearDown() throws SQLException {
        conn.close();
    }

    @Test
    public void testCreateConsulta() {
        Consulta consulta = new Consulta();
        consulta.setData("2023-07-17");
        consulta.setDescricao("Consulta de rotina");
        consulta.setRealizada('N');
        consulta.setIdmedico(1); // ID válido
        consulta.setIdpaciente(1); // ID válido

        consultaDAO.create_consulta(consulta);

        // Aqui é necessário alguma forma de validar que a consulta foi inserida corretamente.
        // Por exemplo, você poderia ter um método 'countConsultas' que retorna o número de consultas no banco de dados.
        // Em um caso real, isso seria mais complexo e envolveria, por exemplo, verificar o ID da nova consulta.
    }

    @Test
    public void testGetConsultas() {
        int idPaciente = 1; // ID válido

        ArrayList<Consulta> consultas = consultaDAO.get_consultas(idPaciente);

        assertNotNull("A lista de consultas não deve ser nula", consultas);
        assertTrue("A lista de consultas deve ter pelo menos um item", consultas.size() > 0);
    }

    @Test
    public void testGetConsulta() {
        int idConsulta = 1; // ID válido

        Consulta consulta = consultaDAO.get_consulta(idConsulta);

        assertNotNull("A consulta não deve ser nula", consulta);
        assertEquals("O ID da consulta deve ser o mesmo do ID de entrada", idConsulta, consulta.getId());
    }

    @Test
    public void testGetMedicoEspecialidade() {
        int idConsulta = 1; // ID válido
        ArrayList<Object> medicoDescricao = new ArrayList<>();

        medicoDescricao = consultaDAO.get_medicoEspecialidade(idConsulta, medicoDescricao);

        assertNotNull("A lista não deve ser nula", medicoDescricao);
        assertTrue("A lista deve conter o nome do médico e a descrição da especialidade", medicoDescricao.size() == 2);
    }

    @Test
    public void testGetProcedimentosDisponiveis() {
        ArrayList<Object> procedimentosDisponiveis = consultaDAO.get_procedimentosDisponiveis();

        assertNotNull("A lista não deve ser nula", procedimentosDisponiveis);
        assertTrue("A lista deve ter pelo menos um procedimento disponível", procedimentosDisponiveis.size() > 0);
    }

    @Test
    public void testUpdateConsulta() {
        int idConsulta = 1; // ID válido
        Consulta novaConsulta = new Consulta();
        novaConsulta.setData("2023-07-17");
        novaConsulta.setDescricao("Consulta atualizada");
        novaConsulta.setRealizada('S');
        novaConsulta.setIdmedico(1); // ID válido
        novaConsulta.setIdpaciente(1); // ID válido

        consultaDAO.update_consulta(idConsulta, novaConsulta);

        // Aqui é necessário alguma forma de validar que a consulta foi atualizada corretamente.
        // Por exemplo, você poderia ter um método 'getConsulta' que retorna a consulta com base no ID.
        // Em um caso real, isso seria mais complexo e envolveria, por exemplo, verificar os novos dados da consulta.
    }

    @Test
    public void testDeleteConsulta() {
        int idConsulta = 1; // ID válido

        consultaDAO.delete_consulta(idConsulta);

        // Aqui é necessário alguma forma de validar que a consulta foi excluída corretamente.
        // Por exemplo, você poderia ter um método 'getConsulta' que retorna a consulta com base no ID.
        // Em um caso real, isso seria mais complexo e envolveria, por exemplo, verificar que a consulta não existe mais.
    }
}

