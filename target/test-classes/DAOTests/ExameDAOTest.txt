package DAOTests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import model.ExameDAO;
import aplicacao.Exame;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;

public class ExameDAOTest {
    ExameDAO exameDAO;

    @Before
    public void setUp() {
        exameDAO = new ExameDAO();
    }

    @Test
    public void testCreateExame() {
        Exame novoExame = new Exame();
        novoExame.setDescricao("Exame de Sangue");

        exameDAO.create_exame(novoExame);

        // Aqui você precisa de alguma maneira de validar que o exame foi criado corretamente.
        // Como no seu código original não existe maneira de verificar isso diretamente,
        // a sugestão é verificar no banco de dados se a inserção ocorreu corretamente.
    }

    @Test
    public void testGetExames() {
        ArrayList<Exame> exames = exameDAO.get_exames();

        assertNotNull("A lista de exames não deve ser nula", exames);
        assertTrue("A lista de exames deve ter pelo menos um exame", exames.size() > 0);
    }

    @Test
    public void testGetExame() {
        int idExame = 1; // ID válido

        Exame exame = exameDAO.get_exame(idExame);

        assertNotNull("O exame não deve ser nulo", exame);
        assertEquals("O ID do exame deve ser o mesmo do ID de entrada", idExame, exame.getId());
    }

    @Test
    public void testGetExamesDaConsulta() {
        int idConsulta = 1; // ID válido
        ArrayList<String> listaExames = new ArrayList<>();

        ArrayList<String> examesConsulta = exameDAO.get_examesDaConsulta(idConsulta, listaExames);

        assertNotNull("A lista de exames da consulta não deve ser nula", examesConsulta);
        assertTrue("A lista de exames da consulta deve ter pelo menos um exame", examesConsulta.size() > 0);
    }

    @Test
    public void testUpdateExame() {
        int idExame = 1; // ID válido
        Exame novoExame = new Exame();
        novoExame.setDescricao("Exame de Vista");

        exameDAO.update_exame(idExame, novoExame);

        // Aqui é necessário alguma forma de validar que o exame foi atualizado corretamente.
        // Por exemplo, você poderia ter um método 'getExame' que retorna o exame com base no ID.
        // Em um caso real, isso seria mais complexo e envolveria, por exemplo, verificar os novos dados do exame.
    }

    @Test
    public void testDeleteExame() {
        int idExame = 1; // ID válido

        exameDAO.delete_exame(idExame);

        // Aqui é necessário alguma forma de validar que o exame foi excluído corretamente.
        // Por exemplo, você poderia ter um método 'getExame' que retorna o exame com base no ID.
        // Em um caso real, isso seria mais complexo e envolveria, por exemplo, verificar que o exame não existe mais.
    }

    @Test
    public void testDeleteTipoExame() {
        int idExame = 1; // ID válido

        exameDAO.delete_tipoExame(idExame);

        // Aqui é necessário alguma forma de validar que o tipo de exame foi excluído corretamente.
        // Por exemplo, você poderia ter um método 'getTipoExame' que retorna o tipo de exame com base no ID.
        // Em um caso real, isso seria mais complexo e envolveria, por exemplo, verificar que o tipo de exame não existe mais.
    }

    @Test
    public void testGetIdDeleteExame() {
        int idExame = 1; // ID válido

        ArrayList<Integer> idExames = exameDAO.get_idDeleteExame(idExame);

        assertNotNull("A lista de IDs de exames não deve ser nula", idExames);
        assertTrue("A lista de IDs de exames deve ter pelo menos um ID", idExames.size() > 0);
    }
}

